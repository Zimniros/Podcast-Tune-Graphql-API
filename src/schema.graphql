# import * from './generated/prisma.graphql'
enum CountryCodes {
  US
  GB
  CA
  DE
  SE
  CH
  RU
  BY
  UA
  LV
  LT
}

type SuccessMessage {
  message: String
}

type Mutation {
  login(email: String!, password: String!): User!
  register(email: String!, password: String!, name: String): User!
  logout: SuccessMessage
  requestReset(email: String!): SuccessMessage
  resetPassword(
    resetToken: String!
    password: String!
    confirmPassword: String!
  ): User!

  setPlayingEpisode(id: ID!): QueueEpisode!
  addEpisodeToQueueNext(id: ID!): QueueEpisode!
  addEpisodeToQueueLast(id: ID!): QueueEpisode!
  removeEpisodeFromQueue(id: ID!): QueueEpisode!

  addEpisodeToFavorites(id: ID!): FavoriteEpisode!
  removeEpisodeFromFavorites(id: ID!): FavoriteEpisode!

  updatePodcastFeed(id: ID!): [Episode!]!
  updateEpisodeDuration(id: ID!, duration: Float!): Episode!

  getCategories: [Category!]!
  getPodcastsForAllCategories(
    limit: Int
    country: CountryCodes
    first: Int
    skip: Int
  ): Boolean
  getPodcastsForCategory(
    categoryId: Int!
    limit: Int
    country: CountryCodes
  ): Boolean
}

type Query {
  me: User
  playingEpisode: QueueEpisode
  queue: [QueueEpisode!]!
  favorites: [FavoriteEpisode!]!

  podcasts(
    where: PodcastWhereInput
    orderBy: PodcastOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Podcast]!
  episodes(
    where: EpisodeWhereInput
    orderBy: EpisodeOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Episode]!
  categories(
    where: CategoryWhereInput
    orderBy: CategoryOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Category]!

  itunesResults(searchTerm: String!, limit: Int): [Podcast]!

  podcast(where: PodcastWhereUniqueInput!): Podcast
  episode(where: EpisodeWhereUniqueInput!): Episode
  category(where: CategoryWhereUniqueInput!): Category

  podcastsConnection(
    where: PodcastWhereInput
    orderBy: PodcastOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): PodcastConnection!
  episodesConnection(
    where: EpisodeWhereInput
    orderBy: EpisodeOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): EpisodeConnection!
  categoriesConnection(
    where: CategoryWhereInput
    orderBy: CategoryOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): CategoryConnection!
}

type User {
  id: ID!
  name: String
  email: String!
  permissions: [Permission!]!
  queue: [QueueEpisode!]!
  favorites: [FavoriteEpisode!]!
}
