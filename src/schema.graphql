# import * from './generated/prisma.graphql'
enum CountryCodes {
  US
  GB
  CA
  DE
  SE
  CH
  RU
  BY
  UA
  LV
  LT
}

type SuccessMessage {
  message: String
}

type Error {
  path: String!
  message: String!
}

type AuthPayload {
  errors: [Error!]
  token: String
}

type Mutation {
  login(email: String!, password: String!): AuthPayload!
  register(email: String!, password: String!, name: String): AuthPayload!
  logout: SuccessMessage
  requestReset(email: String!): SuccessMessage
  resetPassword(
    resetToken: String!
    password: String!
    confirmPassword: String!
  ): User!

  setPlayingEpisode(id: ID!): QueueEpisode!
  addEpisodeToQueueNext(id: ID!): QueueEpisode!
  addEpisodeToQueueLast(id: ID!): QueueEpisode!
  removeEpisodeFromQueue(id: ID!): QueueEpisode!

  addEpisodeToFavorites(id: ID!): FavoriteEpisode!
  removeEpisodeFromFavorites(id: ID!): FavoriteEpisode!

  subscribeToPodcast(id: ID!): SubscribedPodcast!
  unsubscribeFromPodcast(id: ID!): SubscribedPodcast!

  setPlayedTime(id: ID!, playedTime: Float!): InProgressEpisode!

  markEpisodeAsPlayed(id: ID!): PlayedEpisode!
  markEpisodeAsUnplayed(id: ID!): PlayedEpisode!

  updatePodcastFeed(id: ID!): [Episode!]!
  updateEpisodeDuration(id: ID!, duration: Float!): Episode!

  getCategories: [Category!]!
  getPodcastsForAllCategories(
    limit: Int
    country: CountryCodes
    first: Int
    skip: Int
  ): Boolean
  getPodcastsForCategory(
    categoryId: Int!
    limit: Int
    country: CountryCodes
  ): Boolean
}

type Query {
  me: User
  playingEpisode: QueueEpisode
  queue: [QueueEpisode!]!
  favorites: [FavoriteEpisode!]!
  inProgress: [InProgressEpisode!]!
  subscribedPodcasts: [SubscribedPodcast!]!

  podcasts(
    where: PodcastWhereInput
    orderBy: PodcastOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Podcast]!
  episodes(
    where: EpisodeWhereInput
    orderBy: EpisodeOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Episode]!
  categories(
    where: CategoryWhereInput
    orderBy: CategoryOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Category]!

  itunesResults(searchTerm: String!, limit: Int): [Podcast]!

  podcast(where: PodcastWhereUniqueInput!): Podcast
  episode(where: EpisodeWhereUniqueInput!): Episode
  category(where: CategoryWhereUniqueInput!): Category

  podcastsConnection(
    where: PodcastWhereInput
    orderBy: PodcastOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): PodcastConnection!
  episodesConnection(
    where: EpisodeWhereInput
    orderBy: EpisodeOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): EpisodeConnection!
  categoriesConnection(
    where: CategoryWhereInput
    orderBy: CategoryOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): CategoryConnection!
}

type User {
  id: ID!
  name: String
  email: String!
  permissions: [Permission!]!
  queue: [QueueEpisode!]!
  favorites: [FavoriteEpisode!]!
  inProgress: [InProgressEpisode!]!
  subscribedPodcasts: [SubscribedPodcast!]!
}

type Episode {
  id: ID!
  podcast: Podcast!
  title: String!
  description: String
  descriptionSanitized: String
  mediaUrl: String!
  duration: Float
  durationVerified: Boolean!
  pubDate: DateTime
  link: String
  episodeArtwork: String
  isInFavorites: Boolean!
  isInQueue: Boolean!
  isPlayed: Boolean!
  playedTime: Float!
}

type Podcast {
  id: ID!
  itunesId: Int!
  title: String!
  titleLC: String!
  author: String!
  authorLC: String!
  description: String
  artworkSmall: String!
  artworkLarge: String!
  feedUrl: String
  websiteUrl: String
  itunesUrl: String!
  categories: [Category!]!
  episodes(orderBy: EpisodeOrderByInput, first: Int, last: Int): [Episode!]!
  createdAt: DateTime!
  updatedAt: DateTime!
  feedCheckedAt: DateTime
  isFeedUpdating: Boolean!
  isSubscribedTo: Boolean!
}
