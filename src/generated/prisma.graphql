# source: http://localhost:4466
# timestamp: Fri Jul 19 2019 16:05:59 GMT+0300 (Moscow Standard Time)

type AggregateCategory {
  count: Int!
}

type AggregateEpisode {
  count: Int!
}

type AggregatePodcast {
  count: Int!
}

type AggregateQueueEpisode {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

type Category implements Node {
  id: ID!
  itunesId: Int!
  name: String!
}

"""A connection to a list of items."""
type CategoryConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [CategoryEdge]!
  aggregate: AggregateCategory!
}

input CategoryCreateInput {
  id: ID
  itunesId: Int!
  name: String!
}

input CategoryCreateManyInput {
  create: [CategoryCreateInput!]
  connect: [CategoryWhereUniqueInput!]
}

"""An edge in a connection."""
type CategoryEdge {
  """The item at the end of the edge."""
  node: Category!

  """A cursor for use in pagination."""
  cursor: String!
}

enum CategoryOrderByInput {
  id_ASC
  id_DESC
  itunesId_ASC
  itunesId_DESC
  name_ASC
  name_DESC
}

type CategoryPreviousValues {
  id: ID!
  itunesId: Int!
  name: String!
}

input CategoryScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [CategoryScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [CategoryScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CategoryScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  itunesId: Int

  """All values that are not equal to given value."""
  itunesId_not: Int

  """All values that are contained in given list."""
  itunesId_in: [Int!]

  """All values that are not contained in given list."""
  itunesId_not_in: [Int!]

  """All values less than the given value."""
  itunesId_lt: Int

  """All values less than or equal the given value."""
  itunesId_lte: Int

  """All values greater than the given value."""
  itunesId_gt: Int

  """All values greater than or equal the given value."""
  itunesId_gte: Int
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
}

type CategorySubscriptionPayload {
  mutation: MutationType!
  node: Category
  updatedFields: [String!]
  previousValues: CategoryPreviousValues
}

input CategorySubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [CategorySubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [CategorySubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CategorySubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: CategoryWhereInput
}

input CategoryUpdateDataInput {
  itunesId: Int
  name: String
}

input CategoryUpdateInput {
  itunesId: Int
  name: String
}

input CategoryUpdateManyDataInput {
  itunesId: Int
  name: String
}

input CategoryUpdateManyInput {
  create: [CategoryCreateInput!]
  connect: [CategoryWhereUniqueInput!]
  set: [CategoryWhereUniqueInput!]
  disconnect: [CategoryWhereUniqueInput!]
  delete: [CategoryWhereUniqueInput!]
  update: [CategoryUpdateWithWhereUniqueNestedInput!]
  updateMany: [CategoryUpdateManyWithWhereNestedInput!]
  deleteMany: [CategoryScalarWhereInput!]
  upsert: [CategoryUpsertWithWhereUniqueNestedInput!]
}

input CategoryUpdateManyMutationInput {
  itunesId: Int
  name: String
}

input CategoryUpdateManyWithWhereNestedInput {
  where: CategoryScalarWhereInput!
  data: CategoryUpdateManyDataInput!
}

input CategoryUpdateWithWhereUniqueNestedInput {
  where: CategoryWhereUniqueInput!
  data: CategoryUpdateDataInput!
}

input CategoryUpsertWithWhereUniqueNestedInput {
  where: CategoryWhereUniqueInput!
  update: CategoryUpdateDataInput!
  create: CategoryCreateInput!
}

input CategoryWhereInput {
  """Logical AND on all given filters."""
  AND: [CategoryWhereInput!]

  """Logical OR on all given filters."""
  OR: [CategoryWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CategoryWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  itunesId: Int

  """All values that are not equal to given value."""
  itunesId_not: Int

  """All values that are contained in given list."""
  itunesId_in: [Int!]

  """All values that are not contained in given list."""
  itunesId_not_in: [Int!]

  """All values less than the given value."""
  itunesId_lt: Int

  """All values less than or equal the given value."""
  itunesId_lte: Int

  """All values greater than the given value."""
  itunesId_gt: Int

  """All values greater than or equal the given value."""
  itunesId_gte: Int
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
}

input CategoryWhereUniqueInput {
  id: ID
  itunesId: Int
}

scalar DateTime

type Episode implements Node {
  id: ID!
  podcast: Podcast!
  title: String!
  description: String
  mediaUrl: String!
  duration: Float
  durationVerified: Boolean!
  pubDate: DateTime
  link: String
}

"""A connection to a list of items."""
type EpisodeConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [EpisodeEdge]!
  aggregate: AggregateEpisode!
}

input EpisodeCreateInput {
  id: ID
  title: String!
  description: String
  mediaUrl: String!
  duration: Float
  durationVerified: Boolean
  pubDate: DateTime
  link: String
  podcast: PodcastCreateOneWithoutEpisodesInput!
}

input EpisodeCreateManyWithoutPodcastInput {
  create: [EpisodeCreateWithoutPodcastInput!]
  connect: [EpisodeWhereUniqueInput!]
}

input EpisodeCreateOneInput {
  create: EpisodeCreateInput
  connect: EpisodeWhereUniqueInput
}

input EpisodeCreateWithoutPodcastInput {
  id: ID
  title: String!
  description: String
  mediaUrl: String!
  duration: Float
  durationVerified: Boolean
  pubDate: DateTime
  link: String
}

"""An edge in a connection."""
type EpisodeEdge {
  """The item at the end of the edge."""
  node: Episode!

  """A cursor for use in pagination."""
  cursor: String!
}

enum EpisodeOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  description_ASC
  description_DESC
  mediaUrl_ASC
  mediaUrl_DESC
  duration_ASC
  duration_DESC
  durationVerified_ASC
  durationVerified_DESC
  pubDate_ASC
  pubDate_DESC
  link_ASC
  link_DESC
}

type EpisodePreviousValues {
  id: ID!
  title: String!
  description: String
  mediaUrl: String!
  duration: Float
  durationVerified: Boolean!
  pubDate: DateTime
  link: String
}

input EpisodeScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [EpisodeScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [EpisodeScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [EpisodeScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  mediaUrl: String

  """All values that are not equal to given value."""
  mediaUrl_not: String

  """All values that are contained in given list."""
  mediaUrl_in: [String!]

  """All values that are not contained in given list."""
  mediaUrl_not_in: [String!]

  """All values less than the given value."""
  mediaUrl_lt: String

  """All values less than or equal the given value."""
  mediaUrl_lte: String

  """All values greater than the given value."""
  mediaUrl_gt: String

  """All values greater than or equal the given value."""
  mediaUrl_gte: String

  """All values containing the given string."""
  mediaUrl_contains: String

  """All values not containing the given string."""
  mediaUrl_not_contains: String

  """All values starting with the given string."""
  mediaUrl_starts_with: String

  """All values not starting with the given string."""
  mediaUrl_not_starts_with: String

  """All values ending with the given string."""
  mediaUrl_ends_with: String

  """All values not ending with the given string."""
  mediaUrl_not_ends_with: String
  duration: Float

  """All values that are not equal to given value."""
  duration_not: Float

  """All values that are contained in given list."""
  duration_in: [Float!]

  """All values that are not contained in given list."""
  duration_not_in: [Float!]

  """All values less than the given value."""
  duration_lt: Float

  """All values less than or equal the given value."""
  duration_lte: Float

  """All values greater than the given value."""
  duration_gt: Float

  """All values greater than or equal the given value."""
  duration_gte: Float
  durationVerified: Boolean

  """All values that are not equal to given value."""
  durationVerified_not: Boolean
  pubDate: DateTime

  """All values that are not equal to given value."""
  pubDate_not: DateTime

  """All values that are contained in given list."""
  pubDate_in: [DateTime!]

  """All values that are not contained in given list."""
  pubDate_not_in: [DateTime!]

  """All values less than the given value."""
  pubDate_lt: DateTime

  """All values less than or equal the given value."""
  pubDate_lte: DateTime

  """All values greater than the given value."""
  pubDate_gt: DateTime

  """All values greater than or equal the given value."""
  pubDate_gte: DateTime
  link: String

  """All values that are not equal to given value."""
  link_not: String

  """All values that are contained in given list."""
  link_in: [String!]

  """All values that are not contained in given list."""
  link_not_in: [String!]

  """All values less than the given value."""
  link_lt: String

  """All values less than or equal the given value."""
  link_lte: String

  """All values greater than the given value."""
  link_gt: String

  """All values greater than or equal the given value."""
  link_gte: String

  """All values containing the given string."""
  link_contains: String

  """All values not containing the given string."""
  link_not_contains: String

  """All values starting with the given string."""
  link_starts_with: String

  """All values not starting with the given string."""
  link_not_starts_with: String

  """All values ending with the given string."""
  link_ends_with: String

  """All values not ending with the given string."""
  link_not_ends_with: String
}

type EpisodeSubscriptionPayload {
  mutation: MutationType!
  node: Episode
  updatedFields: [String!]
  previousValues: EpisodePreviousValues
}

input EpisodeSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [EpisodeSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [EpisodeSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [EpisodeSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: EpisodeWhereInput
}

input EpisodeUpdateDataInput {
  title: String
  description: String
  mediaUrl: String
  duration: Float
  durationVerified: Boolean
  pubDate: DateTime
  link: String
  podcast: PodcastUpdateOneRequiredWithoutEpisodesInput
}

input EpisodeUpdateInput {
  title: String
  description: String
  mediaUrl: String
  duration: Float
  durationVerified: Boolean
  pubDate: DateTime
  link: String
  podcast: PodcastUpdateOneRequiredWithoutEpisodesInput
}

input EpisodeUpdateManyDataInput {
  title: String
  description: String
  mediaUrl: String
  duration: Float
  durationVerified: Boolean
  pubDate: DateTime
  link: String
}

input EpisodeUpdateManyMutationInput {
  title: String
  description: String
  mediaUrl: String
  duration: Float
  durationVerified: Boolean
  pubDate: DateTime
  link: String
}

input EpisodeUpdateManyWithoutPodcastInput {
  create: [EpisodeCreateWithoutPodcastInput!]
  connect: [EpisodeWhereUniqueInput!]
  set: [EpisodeWhereUniqueInput!]
  disconnect: [EpisodeWhereUniqueInput!]
  delete: [EpisodeWhereUniqueInput!]
  update: [EpisodeUpdateWithWhereUniqueWithoutPodcastInput!]
  updateMany: [EpisodeUpdateManyWithWhereNestedInput!]
  deleteMany: [EpisodeScalarWhereInput!]
  upsert: [EpisodeUpsertWithWhereUniqueWithoutPodcastInput!]
}

input EpisodeUpdateManyWithWhereNestedInput {
  where: EpisodeScalarWhereInput!
  data: EpisodeUpdateManyDataInput!
}

input EpisodeUpdateOneRequiredInput {
  create: EpisodeCreateInput
  connect: EpisodeWhereUniqueInput
  update: EpisodeUpdateDataInput
  upsert: EpisodeUpsertNestedInput
}

input EpisodeUpdateWithoutPodcastDataInput {
  title: String
  description: String
  mediaUrl: String
  duration: Float
  durationVerified: Boolean
  pubDate: DateTime
  link: String
}

input EpisodeUpdateWithWhereUniqueWithoutPodcastInput {
  where: EpisodeWhereUniqueInput!
  data: EpisodeUpdateWithoutPodcastDataInput!
}

input EpisodeUpsertNestedInput {
  update: EpisodeUpdateDataInput!
  create: EpisodeCreateInput!
}

input EpisodeUpsertWithWhereUniqueWithoutPodcastInput {
  where: EpisodeWhereUniqueInput!
  update: EpisodeUpdateWithoutPodcastDataInput!
  create: EpisodeCreateWithoutPodcastInput!
}

input EpisodeWhereInput {
  """Logical AND on all given filters."""
  AND: [EpisodeWhereInput!]

  """Logical OR on all given filters."""
  OR: [EpisodeWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [EpisodeWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  mediaUrl: String

  """All values that are not equal to given value."""
  mediaUrl_not: String

  """All values that are contained in given list."""
  mediaUrl_in: [String!]

  """All values that are not contained in given list."""
  mediaUrl_not_in: [String!]

  """All values less than the given value."""
  mediaUrl_lt: String

  """All values less than or equal the given value."""
  mediaUrl_lte: String

  """All values greater than the given value."""
  mediaUrl_gt: String

  """All values greater than or equal the given value."""
  mediaUrl_gte: String

  """All values containing the given string."""
  mediaUrl_contains: String

  """All values not containing the given string."""
  mediaUrl_not_contains: String

  """All values starting with the given string."""
  mediaUrl_starts_with: String

  """All values not starting with the given string."""
  mediaUrl_not_starts_with: String

  """All values ending with the given string."""
  mediaUrl_ends_with: String

  """All values not ending with the given string."""
  mediaUrl_not_ends_with: String
  duration: Float

  """All values that are not equal to given value."""
  duration_not: Float

  """All values that are contained in given list."""
  duration_in: [Float!]

  """All values that are not contained in given list."""
  duration_not_in: [Float!]

  """All values less than the given value."""
  duration_lt: Float

  """All values less than or equal the given value."""
  duration_lte: Float

  """All values greater than the given value."""
  duration_gt: Float

  """All values greater than or equal the given value."""
  duration_gte: Float
  durationVerified: Boolean

  """All values that are not equal to given value."""
  durationVerified_not: Boolean
  pubDate: DateTime

  """All values that are not equal to given value."""
  pubDate_not: DateTime

  """All values that are contained in given list."""
  pubDate_in: [DateTime!]

  """All values that are not contained in given list."""
  pubDate_not_in: [DateTime!]

  """All values less than the given value."""
  pubDate_lt: DateTime

  """All values less than or equal the given value."""
  pubDate_lte: DateTime

  """All values greater than the given value."""
  pubDate_gt: DateTime

  """All values greater than or equal the given value."""
  pubDate_gte: DateTime
  link: String

  """All values that are not equal to given value."""
  link_not: String

  """All values that are contained in given list."""
  link_in: [String!]

  """All values that are not contained in given list."""
  link_not_in: [String!]

  """All values less than the given value."""
  link_lt: String

  """All values less than or equal the given value."""
  link_lte: String

  """All values greater than the given value."""
  link_gt: String

  """All values greater than or equal the given value."""
  link_gte: String

  """All values containing the given string."""
  link_contains: String

  """All values not containing the given string."""
  link_not_contains: String

  """All values starting with the given string."""
  link_starts_with: String

  """All values not starting with the given string."""
  link_not_starts_with: String

  """All values ending with the given string."""
  link_ends_with: String

  """All values not ending with the given string."""
  link_not_ends_with: String
  podcast: PodcastWhereInput
}

input EpisodeWhereUniqueInput {
  id: ID
}

"""Raw JSON value"""
scalar Json

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createUser(data: UserCreateInput!): User!
  createQueueEpisode(data: QueueEpisodeCreateInput!): QueueEpisode!
  createPodcast(data: PodcastCreateInput!): Podcast!
  createEpisode(data: EpisodeCreateInput!): Episode!
  createCategory(data: CategoryCreateInput!): Category!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateQueueEpisode(data: QueueEpisodeUpdateInput!, where: QueueEpisodeWhereUniqueInput!): QueueEpisode
  updatePodcast(data: PodcastUpdateInput!, where: PodcastWhereUniqueInput!): Podcast
  updateEpisode(data: EpisodeUpdateInput!, where: EpisodeWhereUniqueInput!): Episode
  updateCategory(data: CategoryUpdateInput!, where: CategoryWhereUniqueInput!): Category
  deleteUser(where: UserWhereUniqueInput!): User
  deleteQueueEpisode(where: QueueEpisodeWhereUniqueInput!): QueueEpisode
  deletePodcast(where: PodcastWhereUniqueInput!): Podcast
  deleteEpisode(where: EpisodeWhereUniqueInput!): Episode
  deleteCategory(where: CategoryWhereUniqueInput!): Category
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  upsertQueueEpisode(where: QueueEpisodeWhereUniqueInput!, create: QueueEpisodeCreateInput!, update: QueueEpisodeUpdateInput!): QueueEpisode!
  upsertPodcast(where: PodcastWhereUniqueInput!, create: PodcastCreateInput!, update: PodcastUpdateInput!): Podcast!
  upsertEpisode(where: EpisodeWhereUniqueInput!, create: EpisodeCreateInput!, update: EpisodeUpdateInput!): Episode!
  upsertCategory(where: CategoryWhereUniqueInput!, create: CategoryCreateInput!, update: CategoryUpdateInput!): Category!
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  updateManyPodcasts(data: PodcastUpdateManyMutationInput!, where: PodcastWhereInput): BatchPayload!
  updateManyEpisodes(data: EpisodeUpdateManyMutationInput!, where: EpisodeWhereInput): BatchPayload!
  updateManyCategories(data: CategoryUpdateManyMutationInput!, where: CategoryWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  deleteManyQueueEpisodes(where: QueueEpisodeWhereInput): BatchPayload!
  deleteManyPodcasts(where: PodcastWhereInput): BatchPayload!
  deleteManyEpisodes(where: EpisodeWhereInput): BatchPayload!
  deleteManyCategories(where: CategoryWhereInput): BatchPayload!
  executeRaw(database: PrismaDatabase, query: String!): Json!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

enum Permission {
  ADMIN
  USER
  PERMISSIONUPDATE
}

type Podcast implements Node {
  id: ID!
  itunesId: Int!
  title: String!
  titleLC: String!
  author: String!
  authorLC: String!
  description: String
  artworkSmall: String!
  artworkLarge: String!
  feedUrl: String
  websiteUrl: String
  itunesUrl: String!
  categories(where: CategoryWhereInput, orderBy: CategoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Category!]
  episodes(where: EpisodeWhereInput, orderBy: EpisodeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Episode!]
  createdAt: DateTime!
  updatedAt: DateTime!
  feedCheckedAt: DateTime
  isFeedUpdating: Boolean!
}

"""A connection to a list of items."""
type PodcastConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PodcastEdge]!
  aggregate: AggregatePodcast!
}

input PodcastCreateInput {
  id: ID
  itunesId: Int!
  title: String!
  titleLC: String!
  author: String!
  authorLC: String!
  description: String
  artworkSmall: String!
  artworkLarge: String!
  feedUrl: String
  websiteUrl: String
  itunesUrl: String!
  feedCheckedAt: DateTime
  isFeedUpdating: Boolean
  categories: CategoryCreateManyInput
  episodes: EpisodeCreateManyWithoutPodcastInput
}

input PodcastCreateOneWithoutEpisodesInput {
  create: PodcastCreateWithoutEpisodesInput
  connect: PodcastWhereUniqueInput
}

input PodcastCreateWithoutEpisodesInput {
  id: ID
  itunesId: Int!
  title: String!
  titleLC: String!
  author: String!
  authorLC: String!
  description: String
  artworkSmall: String!
  artworkLarge: String!
  feedUrl: String
  websiteUrl: String
  itunesUrl: String!
  feedCheckedAt: DateTime
  isFeedUpdating: Boolean
  categories: CategoryCreateManyInput
}

"""An edge in a connection."""
type PodcastEdge {
  """The item at the end of the edge."""
  node: Podcast!

  """A cursor for use in pagination."""
  cursor: String!
}

enum PodcastOrderByInput {
  id_ASC
  id_DESC
  itunesId_ASC
  itunesId_DESC
  title_ASC
  title_DESC
  titleLC_ASC
  titleLC_DESC
  author_ASC
  author_DESC
  authorLC_ASC
  authorLC_DESC
  description_ASC
  description_DESC
  artworkSmall_ASC
  artworkSmall_DESC
  artworkLarge_ASC
  artworkLarge_DESC
  feedUrl_ASC
  feedUrl_DESC
  websiteUrl_ASC
  websiteUrl_DESC
  itunesUrl_ASC
  itunesUrl_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  feedCheckedAt_ASC
  feedCheckedAt_DESC
  isFeedUpdating_ASC
  isFeedUpdating_DESC
}

type PodcastPreviousValues {
  id: ID!
  itunesId: Int!
  title: String!
  titleLC: String!
  author: String!
  authorLC: String!
  description: String
  artworkSmall: String!
  artworkLarge: String!
  feedUrl: String
  websiteUrl: String
  itunesUrl: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  feedCheckedAt: DateTime
  isFeedUpdating: Boolean!
}

type PodcastSubscriptionPayload {
  mutation: MutationType!
  node: Podcast
  updatedFields: [String!]
  previousValues: PodcastPreviousValues
}

input PodcastSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [PodcastSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [PodcastSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PodcastSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: PodcastWhereInput
}

input PodcastUpdateInput {
  itunesId: Int
  title: String
  titleLC: String
  author: String
  authorLC: String
  description: String
  artworkSmall: String
  artworkLarge: String
  feedUrl: String
  websiteUrl: String
  itunesUrl: String
  feedCheckedAt: DateTime
  isFeedUpdating: Boolean
  categories: CategoryUpdateManyInput
  episodes: EpisodeUpdateManyWithoutPodcastInput
}

input PodcastUpdateManyMutationInput {
  itunesId: Int
  title: String
  titleLC: String
  author: String
  authorLC: String
  description: String
  artworkSmall: String
  artworkLarge: String
  feedUrl: String
  websiteUrl: String
  itunesUrl: String
  feedCheckedAt: DateTime
  isFeedUpdating: Boolean
}

input PodcastUpdateOneRequiredWithoutEpisodesInput {
  create: PodcastCreateWithoutEpisodesInput
  connect: PodcastWhereUniqueInput
  update: PodcastUpdateWithoutEpisodesDataInput
  upsert: PodcastUpsertWithoutEpisodesInput
}

input PodcastUpdateWithoutEpisodesDataInput {
  itunesId: Int
  title: String
  titleLC: String
  author: String
  authorLC: String
  description: String
  artworkSmall: String
  artworkLarge: String
  feedUrl: String
  websiteUrl: String
  itunesUrl: String
  feedCheckedAt: DateTime
  isFeedUpdating: Boolean
  categories: CategoryUpdateManyInput
}

input PodcastUpsertWithoutEpisodesInput {
  update: PodcastUpdateWithoutEpisodesDataInput!
  create: PodcastCreateWithoutEpisodesInput!
}

input PodcastWhereInput {
  """Logical AND on all given filters."""
  AND: [PodcastWhereInput!]

  """Logical OR on all given filters."""
  OR: [PodcastWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PodcastWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  itunesId: Int

  """All values that are not equal to given value."""
  itunesId_not: Int

  """All values that are contained in given list."""
  itunesId_in: [Int!]

  """All values that are not contained in given list."""
  itunesId_not_in: [Int!]

  """All values less than the given value."""
  itunesId_lt: Int

  """All values less than or equal the given value."""
  itunesId_lte: Int

  """All values greater than the given value."""
  itunesId_gt: Int

  """All values greater than or equal the given value."""
  itunesId_gte: Int
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  titleLC: String

  """All values that are not equal to given value."""
  titleLC_not: String

  """All values that are contained in given list."""
  titleLC_in: [String!]

  """All values that are not contained in given list."""
  titleLC_not_in: [String!]

  """All values less than the given value."""
  titleLC_lt: String

  """All values less than or equal the given value."""
  titleLC_lte: String

  """All values greater than the given value."""
  titleLC_gt: String

  """All values greater than or equal the given value."""
  titleLC_gte: String

  """All values containing the given string."""
  titleLC_contains: String

  """All values not containing the given string."""
  titleLC_not_contains: String

  """All values starting with the given string."""
  titleLC_starts_with: String

  """All values not starting with the given string."""
  titleLC_not_starts_with: String

  """All values ending with the given string."""
  titleLC_ends_with: String

  """All values not ending with the given string."""
  titleLC_not_ends_with: String
  author: String

  """All values that are not equal to given value."""
  author_not: String

  """All values that are contained in given list."""
  author_in: [String!]

  """All values that are not contained in given list."""
  author_not_in: [String!]

  """All values less than the given value."""
  author_lt: String

  """All values less than or equal the given value."""
  author_lte: String

  """All values greater than the given value."""
  author_gt: String

  """All values greater than or equal the given value."""
  author_gte: String

  """All values containing the given string."""
  author_contains: String

  """All values not containing the given string."""
  author_not_contains: String

  """All values starting with the given string."""
  author_starts_with: String

  """All values not starting with the given string."""
  author_not_starts_with: String

  """All values ending with the given string."""
  author_ends_with: String

  """All values not ending with the given string."""
  author_not_ends_with: String
  authorLC: String

  """All values that are not equal to given value."""
  authorLC_not: String

  """All values that are contained in given list."""
  authorLC_in: [String!]

  """All values that are not contained in given list."""
  authorLC_not_in: [String!]

  """All values less than the given value."""
  authorLC_lt: String

  """All values less than or equal the given value."""
  authorLC_lte: String

  """All values greater than the given value."""
  authorLC_gt: String

  """All values greater than or equal the given value."""
  authorLC_gte: String

  """All values containing the given string."""
  authorLC_contains: String

  """All values not containing the given string."""
  authorLC_not_contains: String

  """All values starting with the given string."""
  authorLC_starts_with: String

  """All values not starting with the given string."""
  authorLC_not_starts_with: String

  """All values ending with the given string."""
  authorLC_ends_with: String

  """All values not ending with the given string."""
  authorLC_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  artworkSmall: String

  """All values that are not equal to given value."""
  artworkSmall_not: String

  """All values that are contained in given list."""
  artworkSmall_in: [String!]

  """All values that are not contained in given list."""
  artworkSmall_not_in: [String!]

  """All values less than the given value."""
  artworkSmall_lt: String

  """All values less than or equal the given value."""
  artworkSmall_lte: String

  """All values greater than the given value."""
  artworkSmall_gt: String

  """All values greater than or equal the given value."""
  artworkSmall_gte: String

  """All values containing the given string."""
  artworkSmall_contains: String

  """All values not containing the given string."""
  artworkSmall_not_contains: String

  """All values starting with the given string."""
  artworkSmall_starts_with: String

  """All values not starting with the given string."""
  artworkSmall_not_starts_with: String

  """All values ending with the given string."""
  artworkSmall_ends_with: String

  """All values not ending with the given string."""
  artworkSmall_not_ends_with: String
  artworkLarge: String

  """All values that are not equal to given value."""
  artworkLarge_not: String

  """All values that are contained in given list."""
  artworkLarge_in: [String!]

  """All values that are not contained in given list."""
  artworkLarge_not_in: [String!]

  """All values less than the given value."""
  artworkLarge_lt: String

  """All values less than or equal the given value."""
  artworkLarge_lte: String

  """All values greater than the given value."""
  artworkLarge_gt: String

  """All values greater than or equal the given value."""
  artworkLarge_gte: String

  """All values containing the given string."""
  artworkLarge_contains: String

  """All values not containing the given string."""
  artworkLarge_not_contains: String

  """All values starting with the given string."""
  artworkLarge_starts_with: String

  """All values not starting with the given string."""
  artworkLarge_not_starts_with: String

  """All values ending with the given string."""
  artworkLarge_ends_with: String

  """All values not ending with the given string."""
  artworkLarge_not_ends_with: String
  feedUrl: String

  """All values that are not equal to given value."""
  feedUrl_not: String

  """All values that are contained in given list."""
  feedUrl_in: [String!]

  """All values that are not contained in given list."""
  feedUrl_not_in: [String!]

  """All values less than the given value."""
  feedUrl_lt: String

  """All values less than or equal the given value."""
  feedUrl_lte: String

  """All values greater than the given value."""
  feedUrl_gt: String

  """All values greater than or equal the given value."""
  feedUrl_gte: String

  """All values containing the given string."""
  feedUrl_contains: String

  """All values not containing the given string."""
  feedUrl_not_contains: String

  """All values starting with the given string."""
  feedUrl_starts_with: String

  """All values not starting with the given string."""
  feedUrl_not_starts_with: String

  """All values ending with the given string."""
  feedUrl_ends_with: String

  """All values not ending with the given string."""
  feedUrl_not_ends_with: String
  websiteUrl: String

  """All values that are not equal to given value."""
  websiteUrl_not: String

  """All values that are contained in given list."""
  websiteUrl_in: [String!]

  """All values that are not contained in given list."""
  websiteUrl_not_in: [String!]

  """All values less than the given value."""
  websiteUrl_lt: String

  """All values less than or equal the given value."""
  websiteUrl_lte: String

  """All values greater than the given value."""
  websiteUrl_gt: String

  """All values greater than or equal the given value."""
  websiteUrl_gte: String

  """All values containing the given string."""
  websiteUrl_contains: String

  """All values not containing the given string."""
  websiteUrl_not_contains: String

  """All values starting with the given string."""
  websiteUrl_starts_with: String

  """All values not starting with the given string."""
  websiteUrl_not_starts_with: String

  """All values ending with the given string."""
  websiteUrl_ends_with: String

  """All values not ending with the given string."""
  websiteUrl_not_ends_with: String
  itunesUrl: String

  """All values that are not equal to given value."""
  itunesUrl_not: String

  """All values that are contained in given list."""
  itunesUrl_in: [String!]

  """All values that are not contained in given list."""
  itunesUrl_not_in: [String!]

  """All values less than the given value."""
  itunesUrl_lt: String

  """All values less than or equal the given value."""
  itunesUrl_lte: String

  """All values greater than the given value."""
  itunesUrl_gt: String

  """All values greater than or equal the given value."""
  itunesUrl_gte: String

  """All values containing the given string."""
  itunesUrl_contains: String

  """All values not containing the given string."""
  itunesUrl_not_contains: String

  """All values starting with the given string."""
  itunesUrl_starts_with: String

  """All values not starting with the given string."""
  itunesUrl_not_starts_with: String

  """All values ending with the given string."""
  itunesUrl_ends_with: String

  """All values not ending with the given string."""
  itunesUrl_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  feedCheckedAt: DateTime

  """All values that are not equal to given value."""
  feedCheckedAt_not: DateTime

  """All values that are contained in given list."""
  feedCheckedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  feedCheckedAt_not_in: [DateTime!]

  """All values less than the given value."""
  feedCheckedAt_lt: DateTime

  """All values less than or equal the given value."""
  feedCheckedAt_lte: DateTime

  """All values greater than the given value."""
  feedCheckedAt_gt: DateTime

  """All values greater than or equal the given value."""
  feedCheckedAt_gte: DateTime
  isFeedUpdating: Boolean

  """All values that are not equal to given value."""
  isFeedUpdating_not: Boolean
  categories_every: CategoryWhereInput
  categories_some: CategoryWhereInput
  categories_none: CategoryWhereInput
  episodes_every: EpisodeWhereInput
  episodes_some: EpisodeWhereInput
  episodes_none: EpisodeWhereInput
}

input PodcastWhereUniqueInput {
  id: ID
  itunesId: Int
}

enum PrismaDatabase {
  default
}

type Query {
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  queueEpisodes(where: QueueEpisodeWhereInput, orderBy: QueueEpisodeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [QueueEpisode]!
  podcasts(where: PodcastWhereInput, orderBy: PodcastOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Podcast]!
  episodes(where: EpisodeWhereInput, orderBy: EpisodeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Episode]!
  categories(where: CategoryWhereInput, orderBy: CategoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Category]!
  user(where: UserWhereUniqueInput!): User
  queueEpisode(where: QueueEpisodeWhereUniqueInput!): QueueEpisode
  podcast(where: PodcastWhereUniqueInput!): Podcast
  episode(where: EpisodeWhereUniqueInput!): Episode
  category(where: CategoryWhereUniqueInput!): Category
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  queueEpisodesConnection(where: QueueEpisodeWhereInput, orderBy: QueueEpisodeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): QueueEpisodeConnection!
  podcastsConnection(where: PodcastWhereInput, orderBy: PodcastOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PodcastConnection!
  episodesConnection(where: EpisodeWhereInput, orderBy: EpisodeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): EpisodeConnection!
  categoriesConnection(where: CategoryWhereInput, orderBy: CategoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CategoryConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type QueueEpisode implements Node {
  id: ID!
  user: User!
  episode: Episode!
}

"""A connection to a list of items."""
type QueueEpisodeConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [QueueEpisodeEdge]!
  aggregate: AggregateQueueEpisode!
}

input QueueEpisodeCreateInput {
  id: ID
  user: UserCreateOneWithoutQueueInput!
  episode: EpisodeCreateOneInput!
}

input QueueEpisodeCreateManyWithoutUserInput {
  create: [QueueEpisodeCreateWithoutUserInput!]
  connect: [QueueEpisodeWhereUniqueInput!]
}

input QueueEpisodeCreateWithoutUserInput {
  id: ID
  episode: EpisodeCreateOneInput!
}

"""An edge in a connection."""
type QueueEpisodeEdge {
  """The item at the end of the edge."""
  node: QueueEpisode!

  """A cursor for use in pagination."""
  cursor: String!
}

enum QueueEpisodeOrderByInput {
  id_ASC
  id_DESC
}

type QueueEpisodePreviousValues {
  id: ID!
}

input QueueEpisodeScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [QueueEpisodeScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [QueueEpisodeScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [QueueEpisodeScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
}

type QueueEpisodeSubscriptionPayload {
  mutation: MutationType!
  node: QueueEpisode
  updatedFields: [String!]
  previousValues: QueueEpisodePreviousValues
}

input QueueEpisodeSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [QueueEpisodeSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [QueueEpisodeSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [QueueEpisodeSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: QueueEpisodeWhereInput
}

input QueueEpisodeUpdateInput {
  user: UserUpdateOneRequiredWithoutQueueInput
  episode: EpisodeUpdateOneRequiredInput
}

input QueueEpisodeUpdateManyWithoutUserInput {
  create: [QueueEpisodeCreateWithoutUserInput!]
  connect: [QueueEpisodeWhereUniqueInput!]
  set: [QueueEpisodeWhereUniqueInput!]
  disconnect: [QueueEpisodeWhereUniqueInput!]
  delete: [QueueEpisodeWhereUniqueInput!]
  update: [QueueEpisodeUpdateWithWhereUniqueWithoutUserInput!]
  deleteMany: [QueueEpisodeScalarWhereInput!]
  upsert: [QueueEpisodeUpsertWithWhereUniqueWithoutUserInput!]
}

input QueueEpisodeUpdateWithoutUserDataInput {
  episode: EpisodeUpdateOneRequiredInput
}

input QueueEpisodeUpdateWithWhereUniqueWithoutUserInput {
  where: QueueEpisodeWhereUniqueInput!
  data: QueueEpisodeUpdateWithoutUserDataInput!
}

input QueueEpisodeUpsertWithWhereUniqueWithoutUserInput {
  where: QueueEpisodeWhereUniqueInput!
  update: QueueEpisodeUpdateWithoutUserDataInput!
  create: QueueEpisodeCreateWithoutUserInput!
}

input QueueEpisodeWhereInput {
  """Logical AND on all given filters."""
  AND: [QueueEpisodeWhereInput!]

  """Logical OR on all given filters."""
  OR: [QueueEpisodeWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [QueueEpisodeWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  user: UserWhereInput
  episode: EpisodeWhereInput
}

input QueueEpisodeWhereUniqueInput {
  id: ID
}

type Subscription {
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  queueEpisode(where: QueueEpisodeSubscriptionWhereInput): QueueEpisodeSubscriptionPayload
  podcast(where: PodcastSubscriptionWhereInput): PodcastSubscriptionPayload
  episode(where: EpisodeSubscriptionWhereInput): EpisodeSubscriptionPayload
  category(where: CategorySubscriptionWhereInput): CategorySubscriptionPayload
}

type User implements Node {
  id: ID!
  name: String
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  permissions: [Permission!]!
  queue(where: QueueEpisodeWhereInput, orderBy: QueueEpisodeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [QueueEpisode!]
}

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  name: String
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  permissions: UserCreatepermissionsInput
  queue: QueueEpisodeCreateManyWithoutUserInput
}

input UserCreateOneWithoutQueueInput {
  create: UserCreateWithoutQueueInput
  connect: UserWhereUniqueInput
}

input UserCreatepermissionsInput {
  set: [Permission!]
}

input UserCreateWithoutQueueInput {
  id: ID
  name: String
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  permissions: UserCreatepermissionsInput
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  resetToken_ASC
  resetToken_DESC
  resetTokenExpiry_ASC
  resetTokenExpiry_DESC
}

type UserPreviousValues {
  id: ID!
  name: String
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  permissions: [Permission!]!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  permissions: UserUpdatepermissionsInput
  queue: QueueEpisodeUpdateManyWithoutUserInput
}

input UserUpdateManyMutationInput {
  name: String
  email: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  permissions: UserUpdatepermissionsInput
}

input UserUpdateOneRequiredWithoutQueueInput {
  create: UserCreateWithoutQueueInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutQueueDataInput
  upsert: UserUpsertWithoutQueueInput
}

input UserUpdatepermissionsInput {
  set: [Permission!]
}

input UserUpdateWithoutQueueDataInput {
  name: String
  email: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  permissions: UserUpdatepermissionsInput
}

input UserUpsertWithoutQueueInput {
  update: UserUpdateWithoutQueueDataInput!
  create: UserCreateWithoutQueueInput!
}

input UserWhereInput {
  """Logical AND on all given filters."""
  AND: [UserWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  password: String

  """All values that are not equal to given value."""
  password_not: String

  """All values that are contained in given list."""
  password_in: [String!]

  """All values that are not contained in given list."""
  password_not_in: [String!]

  """All values less than the given value."""
  password_lt: String

  """All values less than or equal the given value."""
  password_lte: String

  """All values greater than the given value."""
  password_gt: String

  """All values greater than or equal the given value."""
  password_gte: String

  """All values containing the given string."""
  password_contains: String

  """All values not containing the given string."""
  password_not_contains: String

  """All values starting with the given string."""
  password_starts_with: String

  """All values not starting with the given string."""
  password_not_starts_with: String

  """All values ending with the given string."""
  password_ends_with: String

  """All values not ending with the given string."""
  password_not_ends_with: String
  resetToken: String

  """All values that are not equal to given value."""
  resetToken_not: String

  """All values that are contained in given list."""
  resetToken_in: [String!]

  """All values that are not contained in given list."""
  resetToken_not_in: [String!]

  """All values less than the given value."""
  resetToken_lt: String

  """All values less than or equal the given value."""
  resetToken_lte: String

  """All values greater than the given value."""
  resetToken_gt: String

  """All values greater than or equal the given value."""
  resetToken_gte: String

  """All values containing the given string."""
  resetToken_contains: String

  """All values not containing the given string."""
  resetToken_not_contains: String

  """All values starting with the given string."""
  resetToken_starts_with: String

  """All values not starting with the given string."""
  resetToken_not_starts_with: String

  """All values ending with the given string."""
  resetToken_ends_with: String

  """All values not ending with the given string."""
  resetToken_not_ends_with: String
  resetTokenExpiry: Float

  """All values that are not equal to given value."""
  resetTokenExpiry_not: Float

  """All values that are contained in given list."""
  resetTokenExpiry_in: [Float!]

  """All values that are not contained in given list."""
  resetTokenExpiry_not_in: [Float!]

  """All values less than the given value."""
  resetTokenExpiry_lt: Float

  """All values less than or equal the given value."""
  resetTokenExpiry_lte: Float

  """All values greater than the given value."""
  resetTokenExpiry_gt: Float

  """All values greater than or equal the given value."""
  resetTokenExpiry_gte: Float
  queue_every: QueueEpisodeWhereInput
  queue_some: QueueEpisodeWhereInput
  queue_none: QueueEpisodeWhereInput
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
